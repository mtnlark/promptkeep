{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PromptKeep","text":"<p>A CLI tool for managing and accessing AI prompts, built with Python.</p> <p>PromptKeep helps you organize, access, and reuse AI prompts through a simple command-line interface. It stores prompts as Markdown files with YAML metadata, making them easy to manage and version control.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Store prompts in Markdown files with YAML front matter</li> <li>Fuzzy search for quick prompt retrieval</li> <li>Copy prompts directly to clipboard</li> <li>Local storage (no cloud dependencies)</li> <li>Tag-based organization</li> <li>Obsidian-compatible format</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>git clone https://github.com/mtnlark/promptkeep.git\ncd promptkeep\npip install -e .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<ol> <li> <p>Initialize a prompt vault: <pre><code>promptkeep init ~/PromptVault\n</code></pre></p> </li> <li> <p>Add a new prompt: <pre><code>promptkeep add --title \"Code Review Assistance\"\n</code></pre></p> </li> <li> <p>Select and copy a prompt: <pre><code>promptkeep pick\n</code></pre></p> </li> </ol>"},{"location":"#technical-details","title":"Technical Details","text":"<p>Built with: - Python 3.8+ - Typer for CLI interface - Rich for terminal output - Pyperclip for clipboard operations</p>"},{"location":"#license","title":"License","text":"<p>MIT License</p>"},{"location":"contributing/","title":"Contributing to PromptKeep","text":"<p>Thank you for your interest in contributing to PromptKeep! This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<ol> <li> <p>Fork the repository on GitHub.</p> </li> <li> <p>Clone your fork to your local machine:    <pre><code>git clone https://github.com/YOUR_USERNAME/promptkeep.git\ncd promptkeep\n</code></pre></p> </li> <li> <p>Set up a virtual environment:    <pre><code>python -m venv .venv\nsource .venv/bin/activate  # On Windows, use: .venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install the package in development mode:    <pre><code>pip install -e .\n</code></pre></p> </li> <li> <p>Install development dependencies:    <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a new branch for your feature or bugfix:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following the coding style and guidelines below.</p> </li> <li> <p>Write or update tests that verify your changes.</p> </li> <li> <p>Run the tests to ensure they pass:    <pre><code>pytest\n</code></pre></p> </li> <li> <p>Update documentation if necessary.</p> </li> </ol>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":"<ol> <li> <p>Commit your changes with a descriptive message:    <pre><code>git commit -m \"Add feature: your feature description\"\n</code></pre></p> </li> <li> <p>Push to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> <li> <p>Create a pull request from your fork to the main repository.</p> </li> </ol>"},{"location":"contributing/#coding-guidelines","title":"Coding Guidelines","text":""},{"location":"contributing/#style-guide","title":"Style Guide","text":"<ul> <li>Follow PEP 8 for Python code.</li> <li>Use meaningful variable and function names that describe their purpose.</li> <li>Keep functions and methods small and focused on a single responsibility.</li> </ul>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Write docstrings for all modules, classes, and functions.</li> <li>Follow the Google docstring format as demonstrated in the existing code.</li> <li>Include examples in docstrings when appropriate.</li> <li>Update relevant documentation in the <code>docs/</code> directory when making significant changes.</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ul> <li>Write tests for new features and bug fixes.</li> <li>Ensure all tests pass before submitting your changes.</li> <li>We use <code>pytest</code> for testing.</li> </ul>"},{"location":"contributing/#documentation_1","title":"Documentation","text":""},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<p>The documentation is built using MkDocs with the Material for MkDocs theme.</p> <ol> <li> <p>Install documentation dependencies:    <pre><code>pip install mkdocs mkdocs-material\n</code></pre></p> </li> <li> <p>Preview the documentation:    <pre><code>mkdocs serve\n</code></pre>    This will start a local server at http://127.0.0.1:8000/ where you can preview your changes.</p> </li> <li> <p>Build the documentation:    <pre><code>mkdocs build\n</code></pre>    This will generate static HTML files in the <code>site/</code> directory.</p> </li> </ol>"},{"location":"contributing/#updating-documentation","title":"Updating Documentation","text":"<ul> <li>Reference Documentation: Update <code>docs/reference.md</code> when changing command-line parameters or adding new commands.</li> <li>Usage Guide: Update <code>docs/usage.md</code> for changes that affect how users interact with the tool.</li> <li>Installation Instructions: Update <code>docs/installation.md</code> if the installation process changes.</li> </ul>"},{"location":"contributing/#release-process","title":"Release Process","text":"<p>Releases are managed by the maintainers. The general process is:</p> <ol> <li>Version Bump: Update the version in <code>pyproject.toml</code>.</li> <li>Changelog: Update the changelog with a list of changes since the last release.</li> <li>Release Tag: Create a tag for the release.</li> <li>PyPI Publishing: Publish the new version to PyPI.</li> </ol>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and considerate of others when participating in this project. We strive to provide a welcoming and inclusive environment for everyone.</p>"},{"location":"contributing/#questions-and-support","title":"Questions and Support","text":"<p>If you have questions or need support, please:</p> <ol> <li>Check the existing documentation.</li> <li>Look for existing issues in the GitHub repository.</li> <li>Open a new issue if necessary.</li> </ol> <p>Thank you for contributing to PromptKeep! </p>"},{"location":"installation/","title":"Installation","text":"<p>This page describes how to install PromptKeep.</p>"},{"location":"installation/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/mtnlark/promptkeep.git\ncd promptkeep\npip install .\n</code></pre>"},{"location":"reference/","title":"PromptKeep Reference","text":"<p>This document provides detailed technical reference for PromptKeep's commands, parameters, data structures, file formats, and implementation details. For practical usage examples and workflows, see the Usage Guide.</p>"},{"location":"reference/#command-reference","title":"Command Reference","text":""},{"location":"reference/#global-options","title":"Global Options","text":"<p>These options are available for all commands:</p> <pre><code>--help          Show help message and exit\n--vault PATH    Path to the prompt vault (defaults to ~/PromptVault or PROMPTKEEP_VAULT env var)\n</code></pre>"},{"location":"reference/#init","title":"init","text":"<p>Initializes a new prompt vault.</p> <pre><code>promptkeep init [PATH]\n</code></pre>"},{"location":"reference/#parameters","title":"Parameters","text":"Parameter Required Type Default Description path No string ~/PromptVault Location for the prompt vault"},{"location":"reference/#return-value","title":"Return Value","text":"<p>None. Displays a success panel on completion.</p>"},{"location":"reference/#side-effects","title":"Side Effects","text":"<ul> <li>Creates directory structure for the vault</li> <li>Removes existing content if the vault directory already exists</li> <li>Creates an example prompt file</li> </ul>"},{"location":"reference/#add","title":"add","text":"<p>Adds a new prompt to your vault.</p> <pre><code>promptkeep add [OPTIONS]\n</code></pre>"},{"location":"reference/#parameters_1","title":"Parameters","text":"Parameter Required Type Default Description --title, -t Yes string - Title of the prompt --description, -d No string - Description of the prompt --tag No string[] - Tags for the prompt (can specify multiple) --vault, -v No string ~/PromptVault Path to the prompt vault"},{"location":"reference/#return-value_1","title":"Return Value","text":"<p>None. Displays a success panel on completion.</p>"},{"location":"reference/#side-effects_1","title":"Side Effects","text":"<ul> <li>Creates a new markdown file in the vault</li> <li>Opens the user's text editor</li> <li>May display warnings for similar existing prompts</li> </ul>"},{"location":"reference/#pick","title":"pick","text":"<p>Select a prompt and copy it to the clipboard.</p> <pre><code>promptkeep pick [OPTIONS]\n</code></pre>"},{"location":"reference/#parameters_2","title":"Parameters","text":"Parameter Required Type Default Description --vault, -v No string ~/PromptVault Path to the prompt vault --tag, -t No string[] - Filter prompts by tag --no-copy No flag - Don't copy to clipboard"},{"location":"reference/#return-value_2","title":"Return Value","text":"<p>None. Displays a success panel on completion.</p>"},{"location":"reference/#side-effects_2","title":"Side Effects","text":"<ul> <li>Copies prompt content to the system clipboard</li> <li>Launches external <code>fzf</code> process for selection</li> </ul>"},{"location":"reference/#edit","title":"edit","text":"<p>Edit an existing prompt.</p> <pre><code>promptkeep edit [OPTIONS]\n</code></pre>"},{"location":"reference/#parameters_3","title":"Parameters","text":"Parameter Required Type Default Description --vault, -v No string ~/PromptVault Path to the prompt vault --tag, -t No string[] - Filter prompts by tag"},{"location":"reference/#return-value_3","title":"Return Value","text":"<p>None. Displays a success panel on completion.</p>"},{"location":"reference/#side-effects_3","title":"Side Effects","text":"<ul> <li>Launches external <code>fzf</code> process for selection</li> <li>Opens the user's text editor</li> </ul>"},{"location":"reference/#data-model","title":"Data Model","text":""},{"location":"reference/#prompt-structure","title":"Prompt Structure","text":"<p>Each prompt is represented as a Markdown file with YAML front matter:</p> <pre><code>---\ntitle: \"Title of the prompt\"\ndescription: \"Description of what the prompt does\"\ntags: [\"tag1\", \"tag2\"]\ncreated: \"2023-04-16 10:30:00\"\n---\n\nThe actual prompt content goes here.\n</code></pre>"},{"location":"reference/#yaml-fields","title":"YAML Fields","text":"Field Required Type Description title Yes string Title of the prompt description No string Description of what the prompt does tags No string[] Array of tags for categorization created Auto datetime Creation timestamp (added automatically)"},{"location":"reference/#file-system-structure","title":"File System Structure","text":"<p>The prompt vault follows this structure:</p> <pre><code>VaultPath/\n\u2514\u2500\u2500 Prompts/\n    \u251c\u2500\u2500 example-prompt.md\n    \u251c\u2500\u2500 my-prompt-20230416-103000.md\n    \u2514\u2500\u2500 another-prompt-20230416-104500.md\n</code></pre>"},{"location":"reference/#filename-format","title":"Filename Format","text":"<p>Prompt filenames are automatically generated using this pattern:</p> <pre><code>{sanitized-title}-{timestamp}.md\n</code></pre> <p>Where: - <code>sanitized-title</code> is the lowercase title with spaces replaced by hyphens and invalid characters removed - <code>timestamp</code> is in the format <code>YYYYMMDD-HHMMSS</code></p>"},{"location":"reference/#environment-variables","title":"Environment Variables","text":"Variable Purpose Default PROMPTKEEP_VAULT Default location for the prompt vault ~/PromptVault EDITOR Preferred text editor vim"},{"location":"reference/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Command completed successfully 1 General error (file not found, etc.) 2 User canceled operation"},{"location":"reference/#dependencies","title":"Dependencies","text":""},{"location":"reference/#core-dependencies","title":"Core Dependencies","text":"Package Version Purpose typer &gt;=0.7.0 Command line interface creation rich &gt;=13.0.0 Terminal output formatting pyperclip &gt;=1.8.0 Clipboard operations pyyaml &gt;=6.0 YAML frontmatter parsing"},{"location":"reference/#external-dependencies","title":"External Dependencies","text":"Dependency Purpose Installation fzf Fuzzy finding for prompt selection Varies by platform (see below)"},{"location":"reference/#installing-fzf","title":"Installing fzf","text":"<ul> <li>macOS: <code>brew install fzf</code></li> <li>Linux: </li> <li>Ubuntu/Debian: <code>apt install fzf</code></li> <li>Fedora: <code>dnf install fzf</code></li> <li>Windows: </li> <li>With Chocolatey: <code>choco install fzf</code></li> <li>With Scoop: <code>scoop install fzf</code></li> </ul>"},{"location":"reference/#error-handling","title":"Error Handling","text":""},{"location":"reference/#common-error-messages","title":"Common Error Messages","text":"Error Message Cause Solution \"Vault not found\" Invalid vault path Check the vault path \"No prompts found\" Empty prompt vault Add some prompts first \"No prompts found for tags: X\" No matches for tag filter Check tag names \"Editor exited with non-zero code\" Editor failed to save Check if file was saved properly \"fzf not found\" fzf is not installed Install fzf (see Dependencies)"},{"location":"reference/#security-considerations","title":"Security Considerations","text":"<ul> <li>Prompts are stored as plain text files and are not encrypted</li> <li>No network connectivity is required; all operations are local</li> <li>Consider vault location security if prompts contain sensitive information</li> </ul>"},{"location":"reference/#limitations","title":"Limitations","text":"<ul> <li>Maximum file size: No explicit limit (limited by system memory)</li> <li>Title length: No explicit limit</li> <li>Description length: No explicit limit</li> <li>Tag length: No explicit limit</li> <li>Number of prompts: No explicit limit (limited by filesystem)</li> </ul>"},{"location":"reference/#api-structure","title":"API Structure","text":"<p>PromptKeep is primarily a command-line tool, but its core functions are organized in modules:</p> Module Purpose promptkeep.cli Command-line interface and commands promptkeep.utils Core utilities for file handling and clipboard"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide focuses on how to use PromptKeep in everyday scenarios. For detailed technical information about commands and parameters, see the Reference page.</p>"},{"location":"usage/#getting-started","title":"Getting Started","text":""},{"location":"usage/#setting-up-your-vault","title":"Setting Up Your Vault","text":"<p>Before you can use PromptKeep, you need to create a prompt vault to store your prompts:</p> <pre><code>promptkeep init\n</code></pre> <p>This creates a vault in your home directory at <code>~/PromptVault</code>. You'll see a success message with next steps:</p> <pre><code>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 Success \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2705 Prompt vault created successfully at:\n/Users/youruser/PromptVault\n\nNext steps:\n1. Add your prompts to the 'Prompts' directory\n2. Use 'promptkeep add' to create new prompts\n...\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</code></pre> <p>If you want to keep your vault somewhere else, specify the path:</p> <pre><code>promptkeep init ~/Documents/MyPrompts\n</code></pre>"},{"location":"usage/#creating-your-first-prompt","title":"Creating Your First Prompt","text":"<p>Now that you have a vault, let's add your first prompt:</p> <ol> <li> <p>Run the add command:    <pre><code>promptkeep add\n</code></pre></p> </li> <li> <p>You'll be prompted for information:    <pre><code>Enter a title for your prompt: Email Response Template\nEnter a description (optional): Professional response for client emails\nEnter tags separated by commas (optional): email, professional, client\n</code></pre></p> </li> <li> <p>Your default text editor will open. Add the prompt content below the YAML front matter:    <pre><code>---\ntitle: \"Code Review Prompt\"\ndescription: \"Detailed code review analysis for pull requests\"\ntags: [\"coding\", \"review\", \"ai\"]\n---\n\n# Code Review Analysis\n\nPlease review the following code and provide a comprehensive analysis:\n\n```[LANGUAGE]\n[PASTE CODE HERE]\n</code></pre></p> </li> </ol> <p>Focus on these aspects:    1. Code quality and best practices    2. Potential bugs and edge cases    3. Performance considerations    4. Security vulnerabilities    5. Readability and maintainability</p> <p>For each issue found:    - Explain why it's problematic    - Provide a suggested improvement    - Include code examples where appropriate</p> <p>End with a summary of the main strengths and areas for improvement.    ```</p> <ol> <li>Save and close the editor. Your prompt is now saved in your vault!</li> </ol>"},{"location":"usage/#working-with-your-prompts","title":"Working with Your Prompts","text":""},{"location":"usage/#finding-and-using-prompts","title":"Finding and Using Prompts","text":"<p>When you need to use a prompt:</p> <ol> <li> <p>Run the pick command:    <pre><code>promptkeep pick\n</code></pre></p> </li> <li> <p>A fuzzy finder will appear showing all your prompts.</p> </li> <li> <p>Start typing to search for a specific prompt. For example, type \"email\" to find your email templates.</p> </li> <li> <p>Use arrow keys to navigate and press Enter to select a prompt.</p> </li> <li> <p>The prompt is now copied to your clipboard! Paste it anywhere you need it.</p> </li> </ol>"},{"location":"usage/#organizing-with-tags","title":"Organizing with Tags","text":"<p>Tags make it easier to organize and find your prompts:</p> <ol> <li> <p>When creating a prompt, add tags:    <pre><code>promptkeep add --title \"Meeting Notes\" --tag meeting --tag notes\n</code></pre></p> </li> <li> <p>When searching for prompts, filter by tag:    <pre><code>promptkeep pick --tag meeting\n</code></pre></p> </li> </ol> <p>This will only show prompts with the \"meeting\" tag.</p>"},{"location":"usage/#common-workflows","title":"Common Workflows","text":""},{"location":"usage/#creating-effective-ai-coding-assistants","title":"Creating Effective AI Coding Assistants","text":"<ol> <li> <p>Create specialized coding prompts for different scenarios:    <pre><code>promptkeep add --title \"Debugging Helper\" --tag coding --tag debugging\npromptkeep add --title \"Refactoring Guide\" --tag coding --tag refactoring\n</code></pre></p> </li> <li> <p>When you encounter a coding challenge, find the right prompt:    <pre><code>promptkeep pick --tag coding\n</code></pre></p> </li> <li> <p>Fill in the details with your specific code and context, then send to your AI assistant.</p> </li> </ol>"},{"location":"usage/#building-a-knowledge-management-system","title":"Building a Knowledge Management System","text":"<ol> <li> <p>Store prompts designed to help organize and retrieve information:    <pre><code>promptkeep add --title \"Concept Explainer\" --tag learning --tag explanation\npromptkeep add --title \"Research Summarizer\" --tag research --tag summary\n</code></pre></p> </li> <li> <p>When studying a new topic or processing research papers:    <pre><code>promptkeep pick --tag research\n</code></pre></p> </li> <li> <p>Combine with your source material and send to an AI assistant to generate organized notes or summaries.</p> </li> </ol>"},{"location":"usage/#creating-persona-based-ai-interactions","title":"Creating Persona-Based AI Interactions","text":"<ol> <li> <p>Define different AI personas for different types of feedback:    <pre><code>promptkeep add --title \"Technical Expert Persona\" --tag persona --tag technical\npromptkeep add --title \"Writing Coach Persona\" --tag persona --tag writing\n</code></pre></p> </li> <li> <p>When you need specialized feedback, select the appropriate persona:    <pre><code>promptkeep pick --tag persona\n</code></pre></p> </li> <li> <p>Start your AI conversation with the persona prompt, then continue with your specific questions or content.</p> </li> </ol>"},{"location":"usage/#maintaining-your-prompt-library","title":"Maintaining Your Prompt Library","text":""},{"location":"usage/#organizing-your-prompts","title":"Organizing Your Prompts","text":"<p>Use tags consistently to create an organized system. Consider a tagging structure like:</p> <ul> <li>Content type: <code>email</code>, <code>code</code>, <code>documentation</code></li> <li>Audience: <code>client</code>, <code>team</code>, <code>public</code></li> <li>Project: <code>projectA</code>, <code>projectB</code></li> <li>Purpose: <code>template</code>, <code>reference</code>, <code>guide</code></li> </ul>"},{"location":"usage/#editing-prompts","title":"Editing Prompts","text":"<p>To edit an existing prompt, use the <code>edit</code> command:</p> <pre><code>promptkeep edit\n</code></pre> <p>This will open a fuzzy finder to select the prompt you want to edit. You can filter prompts by tags using the <code>--tag</code> or <code>-t</code> option:</p> <pre><code>promptkeep edit --tag python --tag ai  # Edit prompts tagged with both \"python\" and \"ai\"\npromptkeep edit -t coding             # Edit prompts tagged with \"coding\"\n</code></pre> <p>Once you select a prompt, it will open in your default text editor. Make your changes and save the file to update the prompt.</p>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/#vault-not-found","title":"\"Vault not found\"","text":"<p>If you see this error, your prompt vault can't be located. Try:</p> <ol> <li> <p>Specify the vault path explicitly:    <pre><code>promptkeep pick --vault ~/path/to/your/vault\n</code></pre></p> </li> <li> <p>Or set the environment variable:    <pre><code>export PROMPTKEEP_VAULT=~/path/to/your/vault\npromptkeep pick\n</code></pre></p> </li> </ol>"},{"location":"usage/#editor-exited-with-non-zero-code","title":"\"Editor exited with non-zero code\"","text":"<p>This means there was a problem with your text editor:</p> <ol> <li> <p>Check that your EDITOR environment variable is set correctly:    <pre><code>echo $EDITOR\n</code></pre></p> </li> <li> <p>Try setting it explicitly:    <pre><code>export EDITOR=nano  # or vim, code, etc.\n</code></pre></p> </li> </ol>"},{"location":"usage/#tips-and-tricks","title":"Tips and Tricks","text":"<ul> <li> <p>Template Placeholders: Use consistent placeholder text like <code>[Client Name]</code> in your prompts to quickly identify what needs to be replaced.</p> </li> <li> <p>Keyboard Navigation: In the fuzzy finder, use Ctrl+P/Ctrl+N (or up/down arrows) to navigate without using the mouse.</p> </li> <li> <p>Quick Filtering: Add a dedicated tag like <code>favorite</code> or <code>frequent</code> to prompts you use often, then use <code>promptkeep pick --tag favorite</code> for quick access.</p> </li> <li> <p>Multi-tag Filtering: Combine tags to narrow down your search: <code>promptkeep pick --tag email --tag client</code>. </p> </li> </ul>"}]}